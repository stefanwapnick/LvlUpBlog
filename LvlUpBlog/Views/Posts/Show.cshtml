@using System.Web.Optimization
@model LvlUpBlog.ViewModels.PostsShow

@{
    ViewBag.Title = Model.Post.Title;
}

@section Styles
{
    <link rel="stylesheet" href="~/Content/Styles/posts-show.css">
}


<article>
    <header class="post-header">
        <a class="btn btn-primary" href="@Url.RouteUrl("home")"><span class="glyphicon glyphicon-chevron-left"></span> Back</a>
        <div>
            <hr />
            <span class="pull-left time-box"><b>Aug 28</b> <br />2015</span>
            <h1 class="pull-left">@Model.Post.Title</h1>
            <h1 class="pull-right"><small>By @Model.Post.User.Name</small></h1>
        </div>
        
        <div class="clearfix"></div>
        <br />
        <div class="post-border">
            <span class="time-footer">
            <small><span class="glyphicon glyphicon-time"></span> Last modified at @Model.Post.UpdatedAt </small>
            </span>
        </div>
    </header>
    <br />


    <div class="post-body">
        @Html.Raw(Model.Post.Content)
        Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur
    </div>


    <br />
    <div class="post-footer">
        <a class="btn btn-primary" href="@Url.RouteUrl("home")"><span class="glyphicon glyphicon-chevron-left"></span> Back</a>
        <span class="well pull-right">
            <small>
                <span class="glyphicon glyphicon-tags"></span> Tags:
                @if (Model.Post.Tags.Count > 0)
                {
                   foreach (var tag in Model.Post.Tags)
                    {
                    <a class="post-tag-links" href="@Url.RouteUrl("Tag", new { id = tag.Id, slug = tag.Slug })">@tag.Name</a>
                    } 
                }
                else
                {
                    @: None
                }
                
            </small>  
        </span>
    </div>
</article>

<section class="post-comments">
    <header>
        <h3 class="pull-left">Comments</h3>
        <span class="well pull-right">
            Comments: 0
        </span>
        <div class="clearfix"></div>
    </header>
    
    <article class="comment">
        <div class="row">
            <div class="col-xs-2 text-center comment-header">
                <span class="glyphicon glyphicon-user"></span>
                <br /> @Model.Post.CreatedAt.Date.ToString("D")
                <br /> @Model.Post.CreatedAt.TimeOfDay.ToString()
            </div>
            <div class="col-xs-9 comment-body">
                <h4>Admin says:</h4>
                Volatile loads and stores are exactly free on x86 with the exception that they force an actual memory access instruction. But you want that anyway here. As written the code does not guarantee that an access will happen in the first if which seems to be a bug. Not sure.
            </div>
        </div>
        <br />
    </article>

    <article class="comment">
        <div class="row">
            <div class="col-xs-2 text-center comment-header">
                <span class="glyphicon glyphicon-user"></span>
                <br /> @Model.Post.CreatedAt.Date.ToString("D")
                <br /> @Model.Post.CreatedAt.TimeOfDay.ToString()
            </div>
            <div class="col-xs-9 comment-body">
                <h4>Admin says:</h4>
                Volatile loads and stores are exactly free on x86 with the exception that they force an actual memory access instruction. But you want that anyway here. As written the code does not guarantee that an access will happen in the first if which seems to be a bug. Not sure.
            </div>
        </div>
        <br />
    </article>


    <article class="comment">
        <div class="row">
            <div class="col-xs-2 text-center comment-header">
                <span class="glyphicon glyphicon-user"></span>
                <br /> @Model.Post.CreatedAt.Date.ToString("D")
                <br /> @Model.Post.CreatedAt.TimeOfDay.ToString()
            </div>
            <div class="col-xs-9 comment-body">
                <h4>Admin says:</h4>
                Volatile loads and stores are exactly free on x86 with the exception that they force an actual memory access instruction. But you want that anyway here. As written the code does not guarantee that an access will happen in the first if which seems to be a bug. Not sure.
            </div>
        </div>
        <br />
    </article>

    <article class="comment">
        <div class="row">
            <div class="col-xs-2 text-center comment-header">
                <span class="glyphicon glyphicon-user"></span>
                <br /> @Model.Post.CreatedAt.Date.ToString("D")
                <br /> @Model.Post.CreatedAt.TimeOfDay.ToString()
            </div>
            <div class="col-xs-9 comment-body">
                <h4>Admin says:</h4>
                Volatile loads and stores are exactly free on x86 with the exception that they force an actual memory access instruction. But you want that anyway here. As written the code does not guarantee that an access will happen in the first if which seems to be a bug. Not sure.
            </div>
        </div>
        <br />
    </article>



    @using (Html.BeginForm())
    {
        <br />
        <div class="input-group">
            @Html.TextArea("test", null, new{ @class="form-control", placeholder="Leave a comment.", style="resize:none;"} )
            <span class="input-group-btn">
                <button class="btn btn-primary tall-button" type="submit"> Post</button>
            </span>
        </div>
    }

</section>